// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum UnitOfMeasurement {
    g
    mL
}

enum MealCategoryType {
    Breakfast
    Lunch
    Dinner
    Snack
}

model MealCategory {
    id               String           @id @default(cuid())
    type             MealCategoryType @unique
    foodDiaryEntries FoodDiary[]
}

model Goal {
    id           String @id @default(cuid())
    userId       String @unique
    goalWeight   Float?
    calorieLimit Int    @default(0)
    waterIntake  Int    @default(8)
    user         User   @relation(fields: [userId], references: [id])
}

model FoodItem {
    id                  String            @id @default(cuid())
    name                String            @unique
    caloriesPerServing  Int
    standardServingSize Int
    servingUnit         UnitOfMeasurement @default(g)
    barcode             String?           @unique
    foodDiaryEntries    FoodDiary[]

    @@index([name, barcode])
}

model WeightDiary {
    id        String   @id @default(cuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    weight    Float
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model FoodDiary {
    id               String       @id @default(cuid())
    mealCategoryId   String
    foodItemId       String
    userId           String
    eatenServingSize Int
    date             DateTime     @default(now())
    mealCategory     MealCategory @relation(fields: [mealCategoryId], references: [id])
    foodItem         FoodItem     @relation(fields: [foodItemId], references: [id])
    user             User         @relation(fields: [userId], references: [id])
}

model WaterIntakeDiary {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    foodDiaryEntries   FoodDiary[]
    weightDiaryEntries WeightDiary[]
    goals              Goal?
    waterIntakeEntries WaterIntakeDiary[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
